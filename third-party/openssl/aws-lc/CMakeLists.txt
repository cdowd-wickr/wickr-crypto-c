include(ExternalProject)

set(AWS_LC_BUILD_OPTS -DFIPS=${FIPS} -DBUILD_TESTING=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR})

if(APPLE)
    if (IOS)
        set(AWS_LC_BUILD_OPTS ${AWS_LC_BUILD_OPTS} -DENABLE_BITCODE=${ENABLE_BITCODE} -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE} -DIOS_PLATFORM=${IOS_PLATFORM}
    -DIOS_DEPLOYMENT_TARGET=${IOS_DEPLOYMENT_TARGET} -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES})
    else ()
        set(AWS_LC_BUILD_OPTS ${AWS_LC_BUILD_OPTS} -DBUILD_SHARED_LIBS=ON -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET})
    endif ()
elseif (ANDROID)
    set(AWS_LC_BUILD_OPTS ${AWS_LC_BUILD_OPTS} -DANDROID_ABI=${ANDROID_ABI} -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE} -DANDROID_NATIVE_API_LEVEL=${ANDROID_NATIVE_API_LEVEL})
elseif (WIN32)
    set(AWS_LC_BUILD_OPTS ${AWS_LC_BUILD_OPTS} -DBUILD_SHARED_LIBS=ON)
endif ()

ExternalProject_add(
    openssl
    GIT_REPOSITORY https://github.com/awslabs/aws-lc.git
    GIT_TAG origin/main
    CMAKE_ARGS ${AWS_LC_BUILD_OPTS}
)

set(OPENSSL_ROOT_DIR "${CMAKE_CURRENT_BINARY_DIR}" CACHE INTERNAL "")
set(OPENSSL_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/include" CACHE INTERNAL "")

if(APPLE)
    if (IOS)
        set(OPENSSL_CRYPTO_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.a" CACHE INTERNAL "")
        set(OPENSSL_SSL_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.a" CACHE INTERNAL "")
    else ()
        set(OPENSSL_CRYPTO_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.dylib" CACHE INTERNAL "")
        set(OPENSSL_CRYPTO_SHARED "${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.dylib" CACHE INTERNAL "")
        set(OPENSSL_SSL_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.dylib" CACHE INTERNAL "")
        set(OPENSSL_SSL_SHARED "${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.dylib" CACHE INTERNAL "")
    endif ()
elseif(WIN32)
    set(OPENSSL_CRYPTO_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.lib" CACHE INTERNAL "")
    set(OPENSSL_SSL_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.lib" CACHE INTERNAL "")
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(OPENSSL_CRYPTO_SHARED "${CMAKE_CURRENT_BINARY_DIR}/bin/libcrypto-x64.dll" CACHE INTERNAL "")
        set(OPENSSL_SSL_SHARED "${CMAKE_CURRENT_BINARY_DIR}/bin/libssl-x64.dll" CACHE INTERNAL "")
    else()
        set(OPENSSL_CRYPTO_SHARED "${CMAKE_CURRENT_BINARY_DIR}/bin/libcrypto.dll" CACHE INTERNAL "")
        set(OPENSSL_SSL_SHARED "${CMAKE_CURRENT_BINARY_DIR}/bin/libssl.dll" CACHE INTERNAL "")
    endif()
elseif(ANDROID)
    set(OPENSSL_CRYPTO_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.a" CACHE INTERNAL "")
    set(OPENSSL_SSL_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.a" CACHE INTERNAL "")
elseif(UNIX)
    set(OPENSSL_CRYPTO_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.so" CACHE INTERNAL "")
    set(OPENSSL_SSL_LIBRARY "${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.so" CACHE INTERNAL "")
    set(OPENSSL_CRYPTO_SHARED "${CMAKE_CURRENT_BINARY_DIR}/lib/libcrypto.so" CACHE INTERNAL "")
    set(OPENSSL_SSL_SHARED "${CMAKE_CURRENT_BINARY_DIR}/lib/libssl.so" CACHE INTERNAL "")
endif()